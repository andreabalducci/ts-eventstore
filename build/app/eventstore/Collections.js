define(["require", "exports"], function (require, exports) {
    var Dictionary = (function () {
        function Dictionary(init) {
            if (init === void 0) { init = new Array(); }
            this._keys = new Array();
            this._values = new Array();
            if (init) {
                for (var x = 0; x < init.length; x++) {
                    this.add(init[x].key, init[x].value);
                }
            }
        }
        Dictionary.prototype.add = function (key, value) {
            this[key] = value;
            this._keys.push(key);
            this._values.push(value);
        };
        Dictionary.prototype.remove = function (key) {
            var index = this._keys.indexOf(key, 0);
            this._keys.splice(index, 1);
            this._values.splice(index, 1);
            delete this[key];
        };
        Dictionary.prototype.getValue = function (key) {
            return this[key];
        };
        Dictionary.prototype.keys = function () {
            return this._keys;
        };
        Dictionary.prototype.values = function () {
            return this._values;
        };
        Dictionary.prototype.containsKey = function (key) {
            if (typeof this[key] === "undefined") {
                return false;
            }
            return true;
        };
        Dictionary.prototype.toLookup = function () {
            return this;
        };
        return Dictionary;
    })();
    exports.Dictionary = Dictionary;
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV2ZW50c3RvcmUvQ29sbGVjdGlvbnMudHMiXSwibmFtZXMiOlsiRGljdGlvbmFyeSIsIkRpY3Rpb25hcnkuY29uc3RydWN0b3IiLCJEaWN0aW9uYXJ5LmFkZCIsIkRpY3Rpb25hcnkucmVtb3ZlIiwiRGljdGlvbmFyeS5nZXRWYWx1ZSIsIkRpY3Rpb25hcnkua2V5cyIsIkRpY3Rpb25hcnkudmFsdWVzIiwiRGljdGlvbmFyeS5jb250YWluc0tleSIsIkRpY3Rpb25hcnkudG9Mb29rdXAiXSwibWFwcGluZ3MiOiI7SUFTQTtRQUtDQSxvQkFBWUEsSUFBMkVBO1lBQTNFQyxvQkFBMkVBLEdBQTNFQSxXQUF5Q0EsS0FBS0EsRUFBNkJBO1lBSHZGQSxVQUFLQSxHQUFhQSxJQUFJQSxLQUFLQSxFQUFVQSxDQUFDQTtZQUN0Q0EsWUFBT0EsR0FBUUEsSUFBSUEsS0FBS0EsRUFBS0EsQ0FBQ0E7WUFJN0JBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO2dCQUNWQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtvQkFDdENBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO2dCQUN0Q0EsQ0FBQ0E7WUFDRkEsQ0FBQ0E7UUFDRkEsQ0FBQ0E7UUFFREQsd0JBQUdBLEdBQUhBLFVBQUlBLEdBQVdBLEVBQUVBLEtBQVFBO1lBQ3hCRSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxLQUFLQSxDQUFDQTtZQUNsQkEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDckJBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO1FBQzFCQSxDQUFDQTtRQUVERiwyQkFBTUEsR0FBTkEsVUFBT0EsR0FBV0E7WUFDakJHLElBQUlBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1lBQ3ZDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUM1QkEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsS0FBS0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFFOUJBLE9BQU9BLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQ2xCQSxDQUFDQTtRQUVESCw2QkFBUUEsR0FBUkEsVUFBU0EsR0FBV0E7WUFDbkJJLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQ2xCQSxDQUFDQTtRQUVESix5QkFBSUEsR0FBSkE7WUFDQ0ssTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7UUFDbkJBLENBQUNBO1FBRURMLDJCQUFNQSxHQUFOQTtZQUNDTSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQTtRQUNyQkEsQ0FBQ0E7UUFFRE4sZ0NBQVdBLEdBQVhBLFVBQVlBLEdBQVdBO1lBQ3RCTyxFQUFFQSxDQUFDQSxDQUFDQSxPQUFPQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxLQUFLQSxXQUFXQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDdENBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBO1lBQ2RBLENBQUNBO1lBRURBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBQ2JBLENBQUNBO1FBRURQLDZCQUFRQSxHQUFSQTtZQUNDUSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQTtRQUNiQSxDQUFDQTtRQUNGUixpQkFBQ0E7SUFBREEsQ0FuREEsQUFtRENBLElBQUE7SUFuRFksa0JBQVUsYUFtRHRCLENBQUEiLCJmaWxlIjoiZXZlbnRzdG9yZS9Db2xsZWN0aW9ucy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgSURpY3Rpb25hcnk8VD4ge1xuXHRhZGQoa2V5OiBzdHJpbmcsIHZhbHVlOiBUKTogdm9pZDtcblx0cmVtb3ZlKGtleTogc3RyaW5nKTogdm9pZDtcblx0Y29udGFpbnNLZXkoa2V5OiBzdHJpbmcpOiBib29sZWFuO1xuXHRrZXlzKCk6IHN0cmluZ1tdO1xuXHR2YWx1ZXMoKTogVFtdO1xuXHRnZXRWYWx1ZShrZXk6IHN0cmluZyk6IFQ7XG59XG5cbmV4cG9ydCBjbGFzcyBEaWN0aW9uYXJ5PFQ+IHtcblxuXHRfa2V5czogc3RyaW5nW10gPSBuZXcgQXJyYXk8c3RyaW5nPigpO1xuXHRfdmFsdWVzOiBUW10gPSBuZXcgQXJyYXk8VD4oKTtcblxuXHRjb25zdHJ1Y3Rvcihpbml0OiB7IGtleTogc3RyaW5nOyB2YWx1ZTogVDsgfVtdID0gbmV3IEFycmF5PHsga2V5OiBzdHJpbmcsIHZhbHVlOiBUIH0+KCkpIHtcblxuXHRcdGlmIChpbml0KSB7XG5cdFx0XHRmb3IgKHZhciB4ID0gMDsgeCA8IGluaXQubGVuZ3RoOyB4KyspIHtcblx0XHRcdFx0dGhpcy5hZGQoaW5pdFt4XS5rZXksIGluaXRbeF0udmFsdWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGFkZChrZXk6IHN0cmluZywgdmFsdWU6IFQpIHtcblx0XHR0aGlzW2tleV0gPSB2YWx1ZTtcblx0XHR0aGlzLl9rZXlzLnB1c2goa2V5KTtcblx0XHR0aGlzLl92YWx1ZXMucHVzaCh2YWx1ZSk7XG5cdH1cblxuXHRyZW1vdmUoa2V5OiBzdHJpbmcpIHtcblx0XHR2YXIgaW5kZXggPSB0aGlzLl9rZXlzLmluZGV4T2Yoa2V5LCAwKTtcblx0XHR0aGlzLl9rZXlzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0dGhpcy5fdmFsdWVzLnNwbGljZShpbmRleCwgMSk7XG5cblx0XHRkZWxldGUgdGhpc1trZXldO1xuXHR9XG5cblx0Z2V0VmFsdWUoa2V5OiBzdHJpbmcpOiBUIHtcblx0XHRyZXR1cm4gdGhpc1trZXldO1xuXHR9XG5cblx0a2V5cygpOiBzdHJpbmdbXSB7XG5cdFx0cmV0dXJuIHRoaXMuX2tleXM7XG5cdH1cblxuXHR2YWx1ZXMoKTogVFtdIHtcblx0XHRyZXR1cm4gdGhpcy5fdmFsdWVzO1xuXHR9XG5cblx0Y29udGFpbnNLZXkoa2V5OiBzdHJpbmcpIHtcblx0XHRpZiAodHlwZW9mIHRoaXNba2V5XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0dG9Mb29rdXAoKTogSURpY3Rpb25hcnk8VD4ge1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=